#!/bin/bash
###############################################################
####################### Descriptions ##########################
#This script read in the "EIGENVALUE" file generated by VASP
#and arrange the eigenvalues in the output file "eigenvalue",
#we also read in the kpoints and calculate the length of kpath, 
#and output in the "eigenvalue" file. You can use the date in 
#"eigenvalue" file to plot bandstructures
###############################################################
#Author: Meng Wu, Ph.D. Candidate in Physics
#Affiliation: University of California, Berkeley
#Date: Dec. 6, 2014
#Verison: 1.0
###############################################################
######################### Variables ###########################
VASPINPUT="INCAR"
VASPOUTPUT="OUTCAR"
KPOINTSFILE="KPOINTS"
INFILE="EIGENVAL"
KPTFILE="Klength.dat"
EIGFILE="Eig.dat"
EIGSHIFTFILE="Eig.shift.dat"
TEMPEIGFILE="tempEig.dat"
BANDSFILE="eigenvalue"
BANDSSHIFTFILE="eigenvalue.shift"
FERMIENERGYFILE=$VASPOUTPUT
Helper1="helper1.dat"
Helper2="helper2.dat"
###############################################################
#######################  File clearance  ######################
if [ -f $EIGFILE ]; then
   rm -f $EIGFILE
fi

if [ -f $KPTFILE ]; then
   rm -f $KPTFILE
fi

if [ -f $TEMPEIGFILE ]; then
   rm -f $TEMPEIGFILE
fi

if [ -f $BANDSFILE ]; then
   rm -f $BANDSFILE
fi

if [ -f $Helper1 ]; then
   rm -f $Helper1
fi

if [ -f $Helper2 ]; then
   rm -f $Helper2
fi
###############################################################
#Find the fermi energy from a previous nscf calculation
EFermi=$(grep "E-fermi" $FERMIENERGYFILE | tail -1 | awk '{print $3}')
echo "EFermi = $EFermi"
###############################################################
#Find "reciprocal axes in cartesian coordinates" module and read the starting point for each segment
b1x=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -3 | head -1 | awk '{print $4}')
b1y=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -3 | head -1 | awk '{print $5}')
b1z=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -3 | head -1 | awk '{print $6}')
b2x=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -2 | head -1 | awk '{print $4}')
b2y=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -2 | head -1 | awk '{print $5}')
b2z=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -2 | head -1 | awk '{print $6}')
b3x=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -1 | head -1 | awk '{print $4}')
b3y=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -1 | head -1 | awk '{print $5}')
b3z=$(grep -A3 "reciprocal lattice vectors" $VASPOUTPUT | tail -1 | head -1 | awk '{print $6}')
###############################################################
#Find high-symmetry points from $VASPINPUT and convert it into cartesian coordinates
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
NumHiSymP=$(grep -A 1 "K_POINTS" $VASPINPUT | tail -1 | awk '{print $1}')
#it is actually the first High Symmetry Point
HiSymCounter=2 
FlagChangeStartingPoint=1
BaseLength=0.0
KLength=0
segmentcounter=0
segmentlength=$(sed -n '2p' $KPOINTSFILE | awk '{print $1}')
echo "segmentlength = $segmentlength"
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
###############################################################
numofbands=$(sed -n '6p' $INFILE | awk '{print $3}')
numofkpts=$(sed -n '6p' $INFILE | awk '{print $2}')
echo "=============================================================="
echo "number of kpoints = $numofkpts, number of bands = $numofbands"
echo "=============================================================="
###############################################################
#####################Loop over kpoints#########################
#Take special notice of HiSymCounter=2, which is the first one
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#for ((i=0;i<$numofkpts;i++)); do
for ((i=0;i<41;i++)); do
    echo "==================================="
   #kptline contains the kpoints (first 3 numbers)
    kptline=$((8+$i*($numofbands+2)))
    echo "kptline = $kptline"
    nextkptline=$((8+($i+1)*($numofbands+2)))
    echo "nextkptline = $nextkptline"
    startline=$((9+$i*($numofbands+2)))
    echo "startline = $startline"
    endline=$(($startline+$numofbands-1))
    echo "endline = $endline"
   #When we change starting point, recalculate the \delta k between two kpoints
   ###########counter for kpoints in one segment
    segmentcounter=$(($segmentcounter+1))
    echo "segmentcounter = $segmentcounter"
    if [ $FlagChangeStartingPoint -eq 1 ]; then
      #Reset segmentcounter
       segmentcounter=1
      #Read in the high symmetry points in crystal fractional coordinate
       Gx0=$(sed -n "${kptline}p" $INFILE | awk '{print $1}')
       Gy0=$(sed -n "${kptline}p" $INFILE | awk '{print $2}')
       Gz0=$(sed -n "${kptline}p" $INFILE | awk '{print $3}')
      ###########Switch off the flag for changing the starting point
       FlagChangeStartingPoint=0
      #echo "kptline = $kptline"
      #echo "$(sed -n "$kptline p" $INFILE)" >> $KPTFILE
      #Read in the next point in cartesian coordinate
       Gx=$(sed -n "${nextkptline}p" $INFILE | awk '{print $1}')
       Gy=$(sed -n "${nextkptline}p" $INFILE | awk '{print $2}')
       Gz=$(sed -n "${nextkptline}p" $INFILE | awk '{print $3}')
      #Delta G in fractional coordinates
       DFGx=$(echo $Gx $Gx0 | awk '{print $1-$2}')
       echo "DFGx = $DFGx"
       DFGy=$(echo $Gy $Gy0 | awk '{print $1-$2}')
       echo "DFGy = $DFGy"
       DFGz=$(echo $Gz $Gz0 | awk '{print $1-$2}')
       echo "DFGz = $DFGz"
      #Delta G in cartesian coordinates
       DCGx=$(echo $DFGx $DFGy $DFGz $b1x $b2x $b3x | awk '{printf("%3.8f\n",$1*$4+$2*$5+$3*$6)}')
       echo "DCGx = $DCGx"
       DCGy=$(echo $DFGx $DFGy $DFGz $b1y $b2y $b3y | awk '{printf("%3.8f\n",$1*$4+$2*$5+$3*$6)}')
       echo "DCGy = $DCGy"
       DCGz=$(echo $DFGx $DFGy $DFGz $b1z $b2z $b3z | awk '{printf("%3.8f\n",$1*$4+$2*$5+$3*$6)}')
       echo "DCGz = $DCGz"
       DLength=$(echo $DCGx $DCGy $DCGz | awk '{printf("%3.8f\n",sqrt($1*$1+$2*$2+$3*$3))}')
       echo "Dlength = $DLength"
fi
################################################################
#We don't need update klength for 1st kpoint
   if [ $i -eq 0 ];then
      echo "KLength = $KLength"
      echo -e "$KLength " >> $KPTFILE    
#Get bands
      sed -n ''$startline','$endline' p' $INFILE | awk '{printf "%10.8f ",$2}' >> $EIGFILE
      echo ' '| awk '{printf "\n"}' >> $EIGFILE
   else
      if [ $segmentcounter -lt $(($segmentlength+1)) -o $i -eq $(($numofkpts-1)) ]; then
         #Update length of kpath
         KLength=$(echo $KLength $DLength | awk '{print $1+$2}' )
         echo "KLength = $KLength"
         echo -e "$KLength " >> $KPTFILE
#Get bands
         sed -n ''$startline','$endline' p' $INFILE | awk '{printf "%10.8f ",$2}' >> $EIGFILE
         echo ' '| awk '{printf "\n"}' >> $EIGFILE
      else
         echo "!!!! Skip kpoint $(($i+1)) !!!!!!"
         FlagChangeStartingPoint=1
      fi
   fi
done
################################################################
############## Paste the klength and eigs together #############
echo $numofkpts $numofbands $(tail -1 $KPTFILE) > $Helper2
paste -d" " $KPTFILE $EIGFILE > $BANDSFILE
################################################################
############ Set Fermi energy as the reference energy ##########
awk '{
     for (i=1;i<='${numofbands}';i++){
         printf("%3.6f ",$i-'${EFermi}')
     }
     printf("\n")
}' $EIGFILE > $EIGSHIFTFILE
paste -d" " $KPTFILE $EIGSHIFTFILE > $BANDSSHIFTFILE
################################################################
echo "========================Finished!============================"
